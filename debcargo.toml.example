# Whether to generate a package for the binary crate.
#bin = true

# Name for the binary crate. Defaults to "<default>" which means the crate
# name, with no "rust-" prefix and with underscores replaced by hyphens.
#bin_name = "<default>"

# Overlay directory to copy on top of the generated one, given relative to the
# directory that contains this config file. If any files conflict with the ones
# generated by debcargo, the latter are moved to <file>.debcargo.hint instead.
#
# For the special case of debian/changelog, generated entries will be prepended
# to the top of the existing d/changelog (from the overlay), rather than stored
# in debian/changelog.debcargo.hint. A further exception: if the distribution
# of the top entry in the existing d/changelog is
# UNRELEASED-FIXME-AUTOGENERATED-DEBCARGO then that whole entry will be
# *replaced* with the generated entry, not prepended.
#overlay = "."

# If true, any "hints" generated will be written back to the overlay directory,
# overwriting any hints that may have previously been stored there.
#
# For the special case of debian/changelog, that will be written-back as-is.
#
# It is strongly recommended that you keep the overlay directory tracked in
# version control, and set this to false if it is not.
#overlay_write_back = true

# Paths from the crate tarball, to exclude from the orig tarball.
# See https://docs.rs/glob/latest/glob/struct.Pattern.html for syntax
#excludes = ["libgit2/**"]

# TODO, not yet implemented
# Whether to allow prerelease deps, by rewriting these to the released version.
# This should only be enabled for certain crates if really necessary, and first
# you should check that they can actually build when this is enabled.
#allow_prerelease_deps = false

[source]

# Debian Standards-Version to use. By default debcargo uses latest policy version.
#policy = "4.0.0"

# Override or provide missing homepage for crate
#homepage = "https://clap.rs"

# Override the VCS entries. By default the git entries are built with the pattern
# "https://salsa.debian.org/rust-team/rust-<packagename>-<version>[.git]".
#
# Please only use this if your package is truly special, e.g. it combines lots
# of languages and/or there is not a crate at the top-level directory. In most
# cases you should prefer packaging as part of the Debian Rust Team, see
# https://wiki.debian.org/Teams/RustPackaging/Policy
#
#vcs_git = "https://salsa.debian.org/special_package/rust-special-0.1.git"
#vcs_browser = "https://salsa.debian.org/special_package/rust-special-0.1"

# By default, library crates get section values as `rust` whereas binary crates
# get a "FIXME". This config key can be used to avoid that.
# TODO: this should be renamed binary_section, or put in packages."XXX" instead.
#section = "PLACEHOLDER"

# This is a TOML list value which appends to the default Build-Depends field
# generated by debcargo. This should be used when crate needs external
# development headers for its building (eg. `libssl-dev` is needed by cargo and
# debcargo).
#build_depends = ["PLACEHOLDER", "PLACEHOLDER"]

# This is a TOML list value which is subtracted from the default Build-Depends
# field generated by debcargo. This should be used when our default generated
# Build-Depends results in a cycle. For example, this might happen if:
#
# - crate A's default-feature depends on crate B's no-default-features (which has no dependencies)
# - crate B's default-feature depends on crate A's no-default-features (which has no dependencies)
#
# In these cases, you'll need to (for example) add "librustA+B-dev <!nocheck>"
# to build_depends_excludes in A's debcargo.toml to break the cycle, and also
# add override_dh_auto_test to A's d/rules to avoid selecting the B feature
# when running the test build. Depending on the exact situation, it should be
# sufficient to do this override only for one of the packages in the cycle.
#
# Note that binary package Depends must be left alone in order to correctly
# express the dependencies; these ought not to have cycles in anyway, even in
# a case like the above example.
#
# This field should *not* be used to exclude arch-specific dependencies. We
# want to include them to support cross-compiling, and they should cause no
# problems since they are just source code. If our test "cargo build" fails for
# one of those dependencies, it should be handled in that package by disabling
# the failing test on the architectures that they are expected to fail on.
#build_depends_excludes = ["PLACEHOLDER", "PLACEHOLDER"]

[packages."librust-PACKAGE-SEMVER-dev"]

# This is the short description for package. By default `debcargo` will try to
# use a description from `Cargo.toml` but sometimes this may lead to a
# meaningless, weird short description.
#summary = "PLACEHOLDER"

# Long description for the package.
#description = """
#PLACEHOLDER
#"""

# A TOML list value, providing additional non-crate dependencies.
#depends = ["PLACEHOLDER", "PLACEHOLDER"]
